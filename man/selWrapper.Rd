% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/operatingModel.R
\name{selWrapper}
\alias{selWrapper}
\title{Selectivity wrapper for sub-cohorts}
\usage{
selWrapper(
  lh,
  TimeAreaObj,
  FisheryObj,
  doPlot = FALSE,
  wd = NULL,
  imageName = NULL,
  dpi = 300
)
}
\arguments{
\item{lh}{An object produced by LHWrapper.}

\item{TimeAreaObj}{A time-area object}

\item{FisheryObj}{A fishery object}

\item{doPlot}{Creates a basic plot to visualize outcomes. Useful for ensuring parameter selections are sensible.}

\item{wd}{A working directly where the output of runProjection is saved}

\item{imageName}{Character. A name for the resulting plot(s)}

\item{dpi}{Resolution in dots per inch of the resulting saved chart.}
}
\description{
Creates the necessary age-based vectors describing selectivity of sub-cohorts
}
\details{
Selectivity or vulnerability, retention and discards are described as follows.
Vulnerability is the probability of being selected or vulnerable to the fishing gear. Shape with respect to length, with a maximum value of 1 is enforced.

Retention is the probability of being retained and not discarded. Describes both the shape with respect to length and maximum value which can be less than 1.

Keep is resulting probability of being landed: Vul x Ret. Used in reporting the catch and catch-at-age

Dead discards is: Vul x (1-Ret) x D, where D is the discard death rate. Used in reporting dead discards and dead discards-at-age

Total removals is: vul x (Ret + (1 - Ret) x D)

Selectivity types: "logistic" with params vector c(length at 50\% sel, length increment to 95\% sel); "explog" exponential logistic (domed) with vector c(p1, peak, p3); "gillnetMasterNormal" master curve for mesh sel with vector(R0 relative peak L/m, var, mesh (in cm)); "gillnetMasterLognormal" master curve for mesh sel with vector (R0 relative peak L/m, var, mesh (in cm))

Retention types: "full" with no params, assumes Keep = Ret; "logistic" with params vector c(length at 50\% ret, length increment to 95\% ret); "slotLimit" with params vector c(min length, max length) where catches occur betweem min and max

Total dead is: Vul x (Ret + (1-Ret)D)
}
