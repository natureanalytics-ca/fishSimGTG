StrategyObj = StrategyObj,
StochasticObj = StochasticObj,
wd = here(),
fileName = fileLabel[sc],
doPlot = TRUE,
titleStrategy = projectionLabel[sc]
)
devtools::load_all()
#library(fishSimGTG)
library(here)
runProjection(LifeHistoryObj = LifeHistoryObj,
TimeAreaObj = TimeAreaObj,
HistFisheryObj = HistFisheryObj,
ProFisheryObj = ProFisheryObj,
StrategyObj = StrategyObj,
StochasticObj = StochasticObj,
wd = here(),
fileName = fileLabel[sc],
doPlot = TRUE,
titleStrategy = projectionLabel[sc]
)
#---------------
devtools::load_all()
#library(fishSimGTG)
library(here)
#Size limit - changes retention, not selectivity
if(stateLmin[sc] == -99){
ProFisheryObj@retType<-"full"
} else {
ProFisheryObj@retType<-"logistic"
ProFisheryObj@retParams<-c(stateLmin[sc],stateLmin[sc]+0.1)
}
#Bag limit
StrategyObj@projectionParams<-list(bag = c(stateBag[sc], stateBag[sc]), effort = matrix(1:1, nrow=50, ncol=2, byrow = FALSE))
runProjection(LifeHistoryObj = LifeHistoryObj,
TimeAreaObj = TimeAreaObj,
HistFisheryObj = HistFisheryObj,
ProFisheryObj = ProFisheryObj,
StrategyObj = StrategyObj,
StochasticObj = StochasticObj,
wd = here(),
fileName = fileLabel[sc],
doPlot = TRUE,
titleStrategy = projectionLabel[sc]
)
#---------------
#Example
#---------------
devtools::load_all()
#library(fishSimGTG)
library(here)
#----------------------------
#Create a LifeHistory object
#----------------------------
#---Populate LifeHistory object
#---Contains the life history parameters
LifeHistoryObj <- new("LifeHistory")
LifeHistoryObj@title<-"Hawaiian Uhu - Parrotfish"
LifeHistoryObj@speciesName<-"Chlorurus perspicillatus"
LifeHistoryObj@Linf<-53.2
LifeHistoryObj@K<-0.225
LifeHistoryObj@t0<- -1.48
LifeHistoryObj@L50<-35
LifeHistoryObj@L95<-35*1.15
LifeHistoryObj@M<-0.16
LifeHistoryObj@L_type<-"FL"
LifeHistoryObj@L_units<-"cm"
LifeHistoryObj@LW_A<-0.0136
LifeHistoryObj@LW_B<-3.109
LifeHistoryObj@Steep<-0.6
LifeHistoryObj@isHermaph<-TRUE
LifeHistoryObj@H50<-46.2
LifeHistoryObj@H95<-58
LifeHistoryObj@recSD<-0 #Run with no rec var'n to see deterministic trends
#---Populate a TimeArea object
#---Contains basic inputs about time and space needed to establish simulation bounds
#---The effort matrix is set as multipliers of initial equilibrium effort
#---Note that 100 iterations have been specified...this will take a few minutes to run
TimeAreaObj<-new("TimeArea")
TimeAreaObj@title = "Example"
TimeAreaObj@gtg = 13
TimeAreaObj@areas = 2
TimeAreaObj@recArea = c(0.99, 0.01)
TimeAreaObj@iterations = 100
TimeAreaObj@historicalYears = 10
TimeAreaObj@historicalBio = 0.5
TimeAreaObj@historicalBioType = "relB"
TimeAreaObj@move <- matrix(c(1,0, 0,1), nrow=2, ncol=2, byrow=FALSE)
TimeAreaObj@historicalEffort<-matrix(1:1, nrow = 10, ncol = 2, byrow = FALSE)
#---Visualize life history. Does everything make sense?
#---Optional, create a plot of life history that is useful for reports.
#To simply display to the console
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj, doPlot = TRUE)
#To save to file (for reports?)
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj, wd = here(), imageName = "LifeHistory", dpi = 300, doPlot = TRUE)
#Note that LHwrapper returns all the details of the life history
lhOut
#-----------------------------
#Setup fishery characteristics
#-----------------------------
#---Pupulate a Fishery object
#---Contains selectivity, retention and discard characteristics
#---Not sure how to set this up? Type ?selWrapper
HistFisheryObj<-new("Fishery")
HistFisheryObj@title<-"Example"
HistFisheryObj@vulType<-"logistic"
HistFisheryObj@vulParams<-c(40.1,40.2) #Approx. knife edge based on input value of 40.1. Must put slightly higher value for second parameter
HistFisheryObj@retType<-"full"
HistFisheryObj@retMax <- 1
HistFisheryObj@Dmort <- 0
#To simply display to the console
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj)
selWrapper(lh = lhOut, TimeAreaObj, FisheryObj = HistFisheryObj, doPlot = TRUE)
#To save to file (for reports?)
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj)
selWrapper(lh = lhOut, TimeAreaObj, FisheryObj = HistFisheryObj, doPlot = TRUE, wd = here(), imageName = "Vulnerability", dpi = 300)
#-----------------------
#Setup batch projections
#-----------------------
#---Here will can setup ecological scenarios, such as low or high initial relative SSB (e.g. scenarios, states of nature)
#---We can also setup multiple management options to run against each of those scenarios
#---After running these simulations, some report-ready plotting functions can be used to aggregate all of the simulations into plots.
#---Setup higher relative SSB scenario
StochasticObj<-new("Stochastic")
StochasticObj@historicalBio = c(0.3, 0.6)
StochasticObj@historicalCPUE = c(1,2) #This is used in bag limit projection
StochasticObj@historicalCPUEType = "vulN"
ProFisheryObj<-new("Fishery")
ProFisheryObj@title<-"Example"
ProFisheryObj@vulType<-"logistic"
ProFisheryObj@vulParams<-c(40.1,40.2) #Approx. knife edge based on input value of 40.1. Must put slightly higher value for second parameter
ProFisheryObj@retType<-"full" #We will change this as needed below in 'for' loop
ProFisheryObj@retMax <- 1
ProFisheryObj@Dmort <- 0
StrategyObj <- new("Strategy")
StrategyObj@projectionYears <- 50
StrategyObj@projectionName<-"projectionStrategy"
StrategyObj@projectionParams<-list(bag = c(-99, -99), effort = matrix(1:1, nrow=50, ncol=2, byrow = FALSE))
#Batch processing - 3 management strategies
stateLmin<-c(-99, 35.6,  35.6)
stateBag<-c(2, -99, 2)
fileLabel<-c("Higher_option1", "Higher_option2", "Higher_option3")
projectionLabel<-c("Bag 2", "Min size 14 inch", "Bag 2 & min size 14 inch")
for(sc in 1:NROW(stateLmin)){
#Size limit - changes retention, not selectivity
if(stateLmin[sc] == -99){
ProFisheryObj@retType<-"full"
} else {
ProFisheryObj@retType<-"logistic"
ProFisheryObj@retParams<-c(stateLmin[sc],stateLmin[sc]+0.1)
}
#Bag limit
StrategyObj@projectionParams<-list(bag = c(stateBag[sc], stateBag[sc]), effort = matrix(1:1, nrow=50, ncol=2, byrow = FALSE))
runProjection(LifeHistoryObj = LifeHistoryObj,
TimeAreaObj = TimeAreaObj,
HistFisheryObj = HistFisheryObj,
ProFisheryObj = ProFisheryObj,
StrategyObj = StrategyObj,
StochasticObj = StochasticObj,
wd = here(),
fileName = fileLabel[sc],
doPlot = TRUE,
titleStrategy = projectionLabel[sc]
)
}
#---Setup lower relative SSB scenario
StochasticObj<-new("Stochastic")
StochasticObj@historicalBio = c(0.1, 0.3)
StochasticObj@historicalCPUE = c(1,2) #This is used in bag limit projection
StochasticObj@historicalCPUEType = "vulN"
ProFisheryObj<-new("Fishery")
ProFisheryObj@title<-"Example"
ProFisheryObj@vulType<-"logistic"
ProFisheryObj@vulParams<-c(40.1,40.2) #Approx. knife edge based on input value of 40.1. Must put slightly higher value for second parameter
ProFisheryObj@retType<-"full" #We will change this as needed below in 'for' loop
ProFisheryObj@retMax <- 1
ProFisheryObj@Dmort <- 0
StrategyObj <- new("Strategy")
StrategyObj@projectionYears <- 50
StrategyObj@projectionName<-"projectionStrategy"
StrategyObj@projectionParams<-list(bag = c(-99, -99), effort = matrix(1:1, nrow=50, ncol=2, byrow = FALSE))
#Batch processing - 3 management strategies
stateLmin<-c(-99, 35.6,  35.6)
stateBag<-c(2, -99,  2)
fileLabel<-c("Lower_option1", "Lower_option2", "Lower_option3")
projectionLabel<-c("Bag 2", "Min size 14 inch", "Bag 2 & min size 14 inch")
for(sc in 1:NROW(stateLmin)){
#Size limit - changes retention, not selectivity
if(stateLmin[sc] == -99){
ProFisheryObj@retType<-"full"
} else {
ProFisheryObj@retType<-"logistic"
ProFisheryObj@retParams<-c(stateLmin[sc],stateLmin[sc]+0.1)
}
#Bag limit
StrategyObj@projectionParams<-list(bag = c(stateBag[sc], stateBag[sc]), effort = matrix(1:1, nrow=50, ncol=2, byrow = FALSE))
runProjection(LifeHistoryObj = LifeHistoryObj,
TimeAreaObj = TimeAreaObj,
HistFisheryObj = HistFisheryObj,
ProFisheryObj = ProFisheryObj,
StrategyObj = StrategyObj,
StochasticObj = StochasticObj,
wd = here(),
fileName = fileLabel[sc],
doPlot = TRUE,
titleStrategy = projectionLabel[sc]
)
}
relSSBscatter(wd =  here(),
fileName = list(
"Higher_option1",
"Higher_option2",
"Higher_option3",
"Lower_option1",
"Lower_option2",
"Lower_option3"
),
facetName = c(as.list(rep("Higher biomass scenario", 3)), as.list(rep("Lower biomass scenario", 3))),
chooseArea = 0,
proYear = 50)
relSSBscatter(wd =  here(),
fileName = list(
"Higher_option1",
"Higher_option2",
"Higher_option3",
"Lower_option1",
"Lower_option2",
"Lower_option3"
),
facetName = c(as.list(rep("Higher biomass scenario", 3)), as.list(rep("Lower biomass scenario", 3))),
chooseArea = 0,
proYear = 10)
relSSBseries(wd =  here(),
fileName = list(
"Higher_option1",
"Higher_option2",
"Higher_option3",
"Lower_option1",
"Lower_option2",
"Lower_option3"
),
facetName = c(as.list(rep("Higher biomass scenario", 3)), as.list(rep("Lower biomass scenario", 3))),
chooseArea = 0,
percentile = c(0.025, 0.975),
doHist = TRUE,
dpi = 300)
#---Populate LifeHistory object
#---Contains the life history parameters
LifeHistoryObj <- new("LifeHistory")
LifeHistoryObj@title<-"Hawaiian Uhu - Parrotfish"
LifeHistoryObj@speciesName<-"Chlorurus perspicillatus"
LifeHistoryObj@Linf<-53.2
LifeHistoryObj@K<-0.225
LifeHistoryObj@t0<- -1.48
LifeHistoryObj@L50<-35
LifeHistoryObj@L95<-35*1.15
LifeHistoryObj@M<-0.16
LifeHistoryObj@L_type<-"FL"
LifeHistoryObj@L_units<-"cm"
LifeHistoryObj@LW_A<-0.0136
LifeHistoryObj@LW_B<-3.109
LifeHistoryObj@Steep<-0.99
LifeHistoryObj@isHermaph<-TRUE
LifeHistoryObj@H50<-46.2
LifeHistoryObj@H95<-58
LifeHistoryObj@recSD<-0 #Run with no rec var'n to see deterministic trends
#---Populate a TimeArea object
#---Contains basic inputs about time and space needed to establish simulation bounds
#---The effort matrix is set as multipliers of initial equilibrium effort
#---Note that 100 iterations have been specified...this will take a few minutes to run
TimeAreaObj<-new("TimeArea")
TimeAreaObj@title = "Example"
TimeAreaObj@gtg = 13
TimeAreaObj@areas = 2
TimeAreaObj@recArea = c(0.99, 0.01)
TimeAreaObj@iterations = 100
TimeAreaObj@historicalYears = 10
TimeAreaObj@historicalBio = 0.5
TimeAreaObj@historicalBioType = "relB"
TimeAreaObj@move <- matrix(c(1,0, 0,1), nrow=2, ncol=2, byrow=FALSE)
TimeAreaObj@historicalEffort<-matrix(1:1, nrow = 10, ncol = 2, byrow = FALSE)
#---Visualize life history. Does everything make sense?
#---Optional, create a plot of life history that is useful for reports.
#To simply display to the console
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj, doPlot = TRUE)
#To save to file (for reports?)
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj, wd = here(), imageName = "LifeHistory", dpi = 300, doPlot = TRUE)
#Note that LHwrapper returns all the details of the life history
lhOut
#-----------------------------
#Setup fishery characteristics
#-----------------------------
#---Pupulate a Fishery object
#---Contains selectivity, retention and discard characteristics
#---Not sure how to set this up? Type ?selWrapper
HistFisheryObj<-new("Fishery")
HistFisheryObj@title<-"Example"
HistFisheryObj@vulType<-"logistic"
HistFisheryObj@vulParams<-c(40.1,40.2) #Approx. knife edge based on input value of 40.1. Must put slightly higher value for second parameter
HistFisheryObj@retType<-"full"
HistFisheryObj@retMax <- 1
HistFisheryObj@Dmort <- 0
#---Visualize fishery vulnerability. Does everything make sense?
#---Optional, create a plot of life history that is useful for reports.
#To simply display to the console
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj)
selWrapper(lh = lhOut, TimeAreaObj, FisheryObj = HistFisheryObj, doPlot = TRUE)
#To save to file (for reports?)
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj)
selWrapper(lh = lhOut, TimeAreaObj, FisheryObj = HistFisheryObj, doPlot = TRUE, wd = here(), imageName = "Vulnerability", dpi = 300)
#-----------------------
#Setup batch projections
#-----------------------
#---Here will can setup ecological scenarios, such as low or high initial relative SSB (e.g. scenarios, states of nature)
#---We can also setup multiple management options to run against each of those scenarios
#---After running these simulations, some report-ready plotting functions can be used to aggregate all of the simulations into plots.
#---Setup higher relative SSB scenario
StochasticObj<-new("Stochastic")
StochasticObj@historicalBio = c(0.3, 0.6)
StochasticObj@historicalCPUE = c(1,2) #This is used in bag limit projection
StochasticObj@historicalCPUEType = "vulN"
ProFisheryObj<-new("Fishery")
ProFisheryObj@title<-"Example"
ProFisheryObj@vulType<-"logistic"
ProFisheryObj@vulParams<-c(40.1,40.2) #Approx. knife edge based on input value of 40.1. Must put slightly higher value for second parameter
ProFisheryObj@retType<-"full" #We will change this as needed below in 'for' loop
ProFisheryObj@retMax <- 1
ProFisheryObj@Dmort <- 0
StrategyObj <- new("Strategy")
StrategyObj@projectionYears <- 50
StrategyObj@projectionName<-"projectionStrategy"
StrategyObj@projectionParams<-list(bag = c(-99, -99), effort = matrix(1:1, nrow=50, ncol=2, byrow = FALSE))
#Batch processing - 3 management strategies
stateLmin<-c(-99, 35.6,  35.6)
stateBag<-c(2, -99, 2)
fileLabel<-c("Higher_option1", "Higher_option2", "Higher_option3")
projectionLabel<-c("Bag 2", "Min size 14 inch", "Bag 2 & min size 14 inch")
for(sc in 1:NROW(stateLmin)){
#Size limit - changes retention, not selectivity
if(stateLmin[sc] == -99){
ProFisheryObj@retType<-"full"
} else {
ProFisheryObj@retType<-"logistic"
ProFisheryObj@retParams<-c(stateLmin[sc],stateLmin[sc]+0.1)
}
#Bag limit
StrategyObj@projectionParams<-list(bag = c(stateBag[sc], stateBag[sc]), effort = matrix(1:1, nrow=50, ncol=2, byrow = FALSE))
runProjection(LifeHistoryObj = LifeHistoryObj,
TimeAreaObj = TimeAreaObj,
HistFisheryObj = HistFisheryObj,
ProFisheryObj = ProFisheryObj,
StrategyObj = StrategyObj,
StochasticObj = StochasticObj,
wd = here(),
fileName = fileLabel[sc],
doPlot = TRUE,
titleStrategy = projectionLabel[sc]
)
}
#---Setup lower relative SSB scenario
StochasticObj<-new("Stochastic")
StochasticObj@historicalBio = c(0.1, 0.3)
StochasticObj@historicalCPUE = c(1,2) #This is used in bag limit projection
StochasticObj@historicalCPUEType = "vulN"
ProFisheryObj<-new("Fishery")
ProFisheryObj@title<-"Example"
ProFisheryObj@vulType<-"logistic"
ProFisheryObj@vulParams<-c(40.1,40.2) #Approx. knife edge based on input value of 40.1. Must put slightly higher value for second parameter
ProFisheryObj@retType<-"full" #We will change this as needed below in 'for' loop
ProFisheryObj@retMax <- 1
ProFisheryObj@Dmort <- 0
StrategyObj <- new("Strategy")
StrategyObj@projectionYears <- 50
StrategyObj@projectionName<-"projectionStrategy"
StrategyObj@projectionParams<-list(bag = c(-99, -99), effort = matrix(1:1, nrow=50, ncol=2, byrow = FALSE))
#Batch processing - 3 management strategies
stateLmin<-c(-99, 35.6,  35.6)
stateBag<-c(2, -99,  2)
fileLabel<-c("Lower_option1", "Lower_option2", "Lower_option3")
projectionLabel<-c("Bag 2", "Min size 14 inch", "Bag 2 & min size 14 inch")
for(sc in 1:NROW(stateLmin)){
#Size limit - changes retention, not selectivity
if(stateLmin[sc] == -99){
ProFisheryObj@retType<-"full"
} else {
ProFisheryObj@retType<-"logistic"
ProFisheryObj@retParams<-c(stateLmin[sc],stateLmin[sc]+0.1)
}
#Bag limit
StrategyObj@projectionParams<-list(bag = c(stateBag[sc], stateBag[sc]), effort = matrix(1:1, nrow=50, ncol=2, byrow = FALSE))
runProjection(LifeHistoryObj = LifeHistoryObj,
TimeAreaObj = TimeAreaObj,
HistFisheryObj = HistFisheryObj,
ProFisheryObj = ProFisheryObj,
StrategyObj = StrategyObj,
StochasticObj = StochasticObj,
wd = here(),
fileName = fileLabel[sc],
doPlot = TRUE,
titleStrategy = projectionLabel[sc]
)
}
renv::snapshot()
devtools::check()
80*75
Lmids<-seq(0,200,5)
p1<-0.15
p2<-86.2
p3<-0.25 #Other options: 0.5, 0.25, 0.001
Sel<-exp(p3*p1*(p2-Lmids))/(1-p3*(1-exp(p1*(p2-Lmids))))
Sel
Lmids<-seq(0,200,5)
p1<-0.15
p2<-86.2
p3<-0.25 #Other options: 0.5, 0.25, 0.001
Sel<-exp(p3*p1*(p2-Lmids))/(1-p3*(1-exp(p1*(p2-Lmids))))
plot(Lmids, Sel, type="l")
abline(h=0.25, col="blue")
Lmids<-seq(0,200,5)
p1<-0.15
p2<-86.2
p3<-0.5 #Other options: 0.5, 0.25, 0.001
Sel<-exp(p3*p1*(p2-Lmids))/(1-p3*(1-exp(p1*(p2-Lmids))))
plot(Lmids, Sel, type="l")
Lmids<-seq(0,200,5)
p1<-0.15
p2<-86.2
p3<-0.05 #Other options: 0.5, 0.25, 0.001
Sel<-exp(p3*p1*(p2-Lmids))/(1-p3*(1-exp(p1*(p2-Lmids))))
plot(Lmids, Sel, type="l")
?jitter
Sel_obs<-jitter(Sel, factor = 2)
Sel_obs
plot(Lmids, Sel_obs, type="p")
plot(Lmids, Sel_obs, type="p")
linesplot(Lmids, Sel, col="blue")
plot(Lmids, Sel_obs, type="p")
lines(Lmids, Sel, col="blue")
Sel_obs<-jitter(Sel, factor = 20)
plot(Lmids, Sel_obs, type="p")
lines(Lmids, Sel, col="blue")
Sel
Sel_obs
Sel_obs<-Sel*rnorm(NROW(Sel), mean = 1, sd = 0.01)
plot(Lmids, Sel_obs, type="p")
lines(Lmids, Sel, col="blue")
Sel_obs<-Sel*rnorm(NROW(Sel), mean = 1, sd = 0.1)
plot(Lmids, Sel_obs, type="p")
lines(Lmids, Sel, col="blue")
Sel_obs<-Sel* exp(rnorm(NROW(Sel), mean = 0, sd = 0.1) - 0.1^2/2)
plot(Lmids, Sel_obs, type="p")
lines(Lmids, Sel, col="blue")
?mle
??mle
library(stats4)
?mle
Sel_obs<-Sel* exp(rnorm(NROW(Sel), mean = 0, sd = 0.1) - 0.1^2/2)
plot(Lmids, Sel_obs, type="p")
lines(Lmids, Sel, col="blue")
lik<-function(p1, p2, p3, k, sd){
p<-exp(p3*p1*(p2-Lmids))/(1-p3*(1-exp(p1*(p2-Lmids))))*k
lik<-vector()
for(i in 1:NROW(Lmids)) lik[i]<-dnorm(Sel_mids[i], mean=p[i], sd=sd, log=TRUE)
#print(paste(-1*sum(lik), p1, p2, p3, k, sd))
-1*sum(lik)
}
x<-mle(lik, start=list(p1=0.1, p2=100, p3=0.2, k=2, sd=1), method = "L-BFGS-B", lower=list(p1=0.02, p2=50, p3=0.005, k=0, sd=0.01), upper=list(p1=1, p2=150, p3=0.6, k=10, sd=100))
lik<-function(p1, p2, p3, k, sd){
p<-exp(p3*p1*(p2-Lmids))/(1-p3*(1-exp(p1*(p2-Lmids))))*k
lik<-vector()
for(i in 1:NROW(Lmids)) lik[i]<-dnorm(Sel_obs[i], mean=p[i], sd=sd, log=TRUE)
#print(paste(-1*sum(lik), p1, p2, p3, k, sd))
-1*sum(lik)
}
x<-mle(lik, start=list(p1=0.1, p2=100, p3=0.2, k=2, sd=1), method = "L-BFGS-B", lower=list(p1=0.02, p2=50, p3=0.005, k=0, sd=0.01), upper=list(p1=1, p2=150, p3=0.6, k=10, sd=100))
x
coef(x)
lik<-function(p1, p2, p3, sd){
p<-exp(p3*p1*(p2-Lmids))/(1-p3*(1-exp(p1*(p2-Lmids))))
lik<-vector()
for(i in 1:NROW(Lmids)) lik[i]<-dnorm(Sel_obs[i], mean=p[i], sd=sd, log=TRUE)
#print(paste(-1*sum(lik), p1, p2, p3, k, sd))
-1*sum(lik)
}
x<-mle(lik, start=list(p1=0.1, p2=100, p3=0.2, sd=1), method = "L-BFGS-B", lower=list(p1=0.02, p2=50, p3=0.005, sd=0.01), upper=list(p1=1, p2=150, p3=0.6, sd=100))
x
Sel_pred<-exp(coef(x)[3]*coef(x)[1]*(coef(x)[2]-Lmids))/(1-coef(x)[3]*(1-exp(coef(x)[1]*(coef(x)[2]-Lmids))))
Sel_pred<-exp(coef(x)[3]*coef(x)[1]*(coef(x)[2]-Lmids))/(1-coef(x)[3]*(1-exp(coef(x)[1]*(coef(x)[2]-Lmids))))
plot(Lmids, Sel_obs, type="p")
lines(Lmids, Sel_pred, col="blue")
Lmids
Lmids<-seq(0,200,5)
p1<-0.15
p2<-86.2
p3<-0.5 #Other options: 0.5, 0.25, 0.001
Sel<-exp(p3*p1*(p2-Lmids))/(1-p3*(1-exp(p1*(p2-Lmids))))
plot(Lmids, Sel, type="l")
Lmids<-seq(0,200,5)
p1<-0.15
p2<-86.2
p3<-0.8 #Other options: 0.5, 0.25, 0.001
Sel<-exp(p3*p1*(p2-Lmids))/(1-p3*(1-exp(p1*(p2-Lmids))))
plot(Lmids, Sel, type="l")
Lmids<-seq(0,200,5)
p1<-0.15
p2<-86.2
p3<-0.5 #Other options: 0.5, 0.25, 0.001
Sel<-exp(p3*p1*(p2-Lmids))/(1-p3*(1-exp(p1*(p2-Lmids))))
plot(Lmids, Sel, type="l")
10*2.54
10.1/2.54
packageVersion("fishSimGTG")
