X$dynamics$recN
dim(X$dynamics$SB)
dt<-data.frame(X$dynamics$SB)
dim(dt)
View(dt)
dt<-vector()
dt[1]<-99
dt[1]
dt<-matrix(ncol=2, nrow=2)
dt
dt<-matrix(1:4, ncol=2, nrow=2)
dt
dt[1,2]
dt[1]
dt[1, ]
dt[1,]
dt[,2]
X$dynamics$SB[1,1,1]
X$dynamics$SB[1,1,]
dim(X$dynamics$SB)
X$dynamics$SB[,1,1]
plot(X$dynamics$SB[,1,1], type="l")
X$dynamics$SB[,1,]
rowSums(X$dynamics$SB[,1,])
colSums(X$dynamics$SB[,1,])
dim
dim(X$dynamics$relSB)
dim(X$dynamics$SPR)
dt<-data.frame(dim(X$dynamics$SPR))
dt
dt<-data.frame(X$dynamics$SPR)
dt
dim(dt)
wd =  here()
fileName = "Lower_option1"
chooseArea = 0
percentile = c(0.025, 0.975)
doHist = FALSE
data<-readRDS(paste0(wd, "/", fileName[[i]],".rds"))
fileName = list(
"Higher_option1",
"Higher_option2",
"Higher_option3",
"Lower_option1",
"Lower_option2",
"Lower_option3"
)
i<-1
i<-1
data<-readRDS(paste0(wd, "/", fileName[[i]],".rds"))
refYear <- 1 + data$TimeAreaObj@historicalYears
startYear <- ifelse(doHist, 1, refYear)
endYear <- 1 + data$TimeAreaObj@historicalYears + data$StrategyObj@projectionYears
refYear
startYear
endYear
1:10
data$TimeAreaObj@iterations
x<-1
data$dynamics$SB[startYear:endYear,x,]
rowSums(data$dynamics$SB[startYear:endYear,x,])
data$dynamics$SB[refYear,x,]
sum(data$dynamics$SB[refYear,x,])
rowSums(data$dynamics$SB[startYear:endYear,x,])/sum(data$dynamics$SB[refYear,x,])
data$dynamics$SB[startYear:endYear,x,]
rowSums(data$dynamics$SB[startYear:endYear,x,])
sum(data$dynamics$SB[refYear,x,])
rowSums(data$dynamics$SB[startYear:endYear,x,])/sum(data$dynamics$SB[refYear,x,])
SSB_tmp<-sapply(1:data$TimeAreaObj@iterations, FUN=function(x){
rowSums(data$dynamics$SB[startYear:endYear,x,])/sum(data$dynamics$SB[refYear,x,])
})
SSB_tmp
dim(SSB_temp)
dim(SSB_tmp)
cat_tmp<-sapply(1:data$TimeAreaObj@iterations, FUN=function(x){
rowSums(data$dynamics$catchB[startYear:endYear,x,])/sum(data$dynamics$catchB[refYear,x,])
})
quantile(SSB_tmp[x,], probs =  percentile)
SSB_tmp[x,]
x<-85
quantile(SSB_tmp[x,], probs =  percentile)
x<-51
quantile(SSB_tmp[x,], probs =  percentile)
median(SSB_tmp[x,])
c(quantile(SSB_tmp[x,], probs =  percentile), median(SSB_tmp[x,]), x)
SSB_range<-t(sapply(1:NROW(SSB_tmp), FUN=function(x){
c(quantile(SSB_tmp[x,], probs =  percentile), median(SSB_tmp[x,]), x)
}))
dim(SSB_range)
SSB_range<-sapply(1:NROW(SSB_tmp), FUN=function(x){
c(quantile(SSB_tmp[x,], probs =  percentile), median(SSB_tmp[x,]), x)
})
dim(SSB_range)
SSB_range<-t(sapply(1:NROW(SSB_tmp), FUN=function(x){
c(quantile(SSB_tmp[x,], probs =  percentile), median(SSB_tmp[x,]), x)
}))
dim(SSB_range)
totalSSB
totalSSB<-data.frame()
totalcatchB<-data.frame()
totalSSB
facetName[[i]]
c(as.list(rep("Higher biomass scenario", 3)), as.list(rep("Lower biomass scenario", 3)))
facetName = c(as.list(rep("Higher biomass scenario", 3)), as.list(rep("Lower biomass scenario", 3)))
facetName[[i]]
rep(facetName[[i]], NROW(SSB_range))
data$titleStrategy
rep(data$titleStrategy, NROW(SSB_range))
SSB_range[,1]
SSB_range[,2]
SSB_range[,3]
SSB_range[,4]
totalSSB<-rbind(totalSSB, list(fct = rep(facetName[[i]], NROW(SSB_range)), nm = rep(data$titleStrategy, NROW(SSB_range)), lower =  SSB_range[,1], upper = SSB_range[,2], med = SSB_range[,3], year = SSB_range[,4]))
year<-med<-lower<-upper<-NULL
totalSSB<-data.frame()
totalcatchB<-data.frame()
for(i in 1:NROW(fileName)){
data<-readRDS(paste0(wd, "/", fileName[[i]],".rds"))
refYear <- 1 + data$TimeAreaObj@historicalYears
startYear <- ifelse(doHist, 1, refYear)
endYear <- 1 + data$TimeAreaObj@historicalYears + data$StrategyObj@projectionYears
#Choose area
if(chooseArea == 0) { #Sum across areas
SSB_tmp<-sapply(1:data$TimeAreaObj@iterations, FUN=function(x){
rowSums(data$dynamics$SB[startYear:endYear,x,])/sum(data$dynamics$SB[refYear,x,])
})
cat_tmp<-sapply(1:data$TimeAreaObj@iterations, FUN=function(x){
rowSums(data$dynamics$catchB[startYear:endYear,x,])/sum(data$dynamics$catchB[refYear,x,])
})
} else { #Specific area selected by user
SSB_tmp<-sapply(1:data$TimeAreaObj@iterations, FUN=function(x){
data$dynamics$SB[startYear:endYear,x,chooseArea]/data$dynamics$SB[refYear,x,chooseArea]
})
cat_tmp<-sapply(1:data$TimeAreaObj@iterations, FUN=function(x){
data$dynamics$catchB[startYear:endYear,x,chooseArea]/data$dynamics$catchB[refYear,x,chooseArea]
})
}
SSB_range<-t(sapply(1:NROW(SSB_tmp), FUN=function(x){
c(quantile(SSB_tmp[x,], probs =  percentile), median(SSB_tmp[x,]), x)
}))
totalSSB<-rbind(totalSSB, list(fct = rep(facetName[[i]], NROW(SSB_range)), nm = rep(data$titleStrategy, NROW(SSB_range)), lower =  SSB_range[,1], upper = SSB_range[,2], med = SSB_range[,3], year = SSB_range[,4]))
cat_range<-t(sapply(1:NROW(cat_tmp), FUN=function(x){
c(quantile(cat_tmp[x,], probs =  percentile), median(cat_tmp[x,]), x)
}))
totalcatchB<-rbind(totalcatchB, list(fct = rep(facetName[[i]], NROW(cat_range)), nm = rep(data$titleStrategy, NROW(cat_range)), lower =  cat_range[,1], upper = cat_range[,2], med = cat_range[,3], year = cat_range[,4]))
}
ggplot(totalSSB, aes(x = year, y = med)) +
geom_line(color = "cornflowerblue")
library(ggplot)
library(ggplot2)
ggplot(totalSSB, aes(x = year, y = med)) +
geom_line(color = "cornflowerblue")
+
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1) +
ylab("Relative biomass") +
xlab("Year") +
theme_classic() +
theme(strip.text.x=element_text(colour = "black", size=8, face="bold"),
strip.text.y=element_text(colour = "black", size=8, face="bold"),
strip.background = element_rect(fill ="lightgrey"),
axis.text=element_text(size=6),
panel.border = element_rect(linetype = "solid", colour = "black", fill=NA)) +
facet_wrap(~ fct + nm, ncol=NROW(unique(totalSSB$nm)), scales = scales)
ggplot(totalSSB, aes(x = year, y = med)) +
geom_line(color = "cornflowerblue") +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1) +
ylab("Relative biomass") +
xlab("Year") +
theme_classic() +
theme(strip.text.x=element_text(colour = "black", size=8, face="bold"),
strip.text.y=element_text(colour = "black", size=8, face="bold"),
strip.background = element_rect(fill ="lightgrey"),
axis.text=element_text(size=6),
panel.border = element_rect(linetype = "solid", colour = "black", fill=NA)) +
facet_wrap(~ fct + nm, ncol=NROW(unique(totalSSB$nm)), scales = scales)
scales = "fixed"
ggplot(totalSSB, aes(x = year, y = med)) +
geom_line(color = "cornflowerblue") +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1) +
ylab("Relative biomass") +
xlab("Year") +
theme_classic() +
theme(strip.text.x=element_text(colour = "black", size=8, face="bold"),
strip.text.y=element_text(colour = "black", size=8, face="bold"),
strip.background = element_rect(fill ="lightgrey"),
axis.text=element_text(size=6),
panel.border = element_rect(linetype = "solid", colour = "black", fill=NA)) +
facet_wrap(~ fct + nm, ncol=NROW(unique(totalSSB$nm)), scales = scales)
dim(X$dynamics$SPR)
dim(X$dynamics$relSB)
X<-matrix(1:6, nrow=2, ncol=3)
X
t(X)
X<-readProjection( wd = here(),
fileName = fileLabel[1])
library(fishSimGTG)
devtools::load_all()
library(fishSimGTG)
library(here)
#----------------------------
#Create a LifeHistory object
#----------------------------
#---Populate LifeHistory object
#---Contains the life history parameters
LifeHistoryObj <- new("LifeHistory")
LifeHistoryObj@title<-"Hawaiian Uhu - Parrotfish"
LifeHistoryObj@speciesName<-"Chlorurus perspicillatus"
LifeHistoryObj@Linf<-53.2
LifeHistoryObj@K<-0.225
LifeHistoryObj@t0<- -1.48
LifeHistoryObj@L50<-35
LifeHistoryObj@L95<-35*1.15
LifeHistoryObj@M<-0.16
LifeHistoryObj@L_type<-"FL"
LifeHistoryObj@L_units<-"cm"
LifeHistoryObj@LW_A<-0.0136
LifeHistoryObj@LW_B<-3.109
LifeHistoryObj@Steep<-0.6
LifeHistoryObj@isHermaph<-TRUE
LifeHistoryObj@H50<-46.2
LifeHistoryObj@H95<-58
LifeHistoryObj@recSD<-0 #Run with no rec var'n to see deterministic trends
#---Populate a TimeArea object
#---Contains basic inputs about time and space needed to establish simulation bounds
#---The historical effort matrix is set as multipliers of initial equilibrium fishing mortality
#---Note that 100 iterations have been specified...this will take a few minutes to run
TimeAreaObj<-new("TimeArea")
TimeAreaObj@title = "Example"
TimeAreaObj@gtg = 13
TimeAreaObj@areas = 2
TimeAreaObj@recArea = c(0.99, 0.01)
TimeAreaObj@iterations = 100
TimeAreaObj@historicalYears = 10
TimeAreaObj@historicalBio = 0.5
TimeAreaObj@historicalBioType = "relB"
TimeAreaObj@move <- matrix(c(1,0, 0,1), nrow=2, ncol=2, byrow=FALSE)
TimeAreaObj@historicalEffort<-matrix(1:1, nrow = 10, ncol = 2, byrow = FALSE)
#---Visualize life history. Does everything make sense?
#---Optional, create a plot of life history that is useful for reports.
#To simply display to the console
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj, doPlot = TRUE)
#To save to file (for reports?)
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj, wd = here(), imageName = "LifeHistory", dpi = 300, doPlot = TRUE)
#Note that LHwrapper returns all the details of the life history
lhOut
#-----------------------------
#Setup fishery characteristics
#-----------------------------
#---Pupulate a Fishery object
#---Contains selectivity, retention and discard characteristics
#---Not sure how to set this up? Type ?selWrapper
HistFisheryObj<-new("Fishery")
HistFisheryObj@title<-"Example"
HistFisheryObj@vulType<-"logistic"
HistFisheryObj@vulParams<-c(40.1,40.2) #Approx. knife edge based on input value of 40.1. Must put slightly higher value for second parameter
HistFisheryObj@retType<-"full"
HistFisheryObj@retMax <- 1
HistFisheryObj@Dmort <- 0
#---Visualize fishery vulnerability. Does everything make sense?
#---Optional, create a plot of life history that is useful for reports.
#To simply display to the console
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj)
selWrapper(lh = lhOut, TimeAreaObj, FisheryObj = HistFisheryObj, doPlot = TRUE)
#To save to file (for reports?)
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj)
selWrapper(lh = lhOut, TimeAreaObj, FisheryObj = HistFisheryObj, doPlot = TRUE, wd = here(), imageName = "Vulnerability", dpi = 300)
#-----------------------
#Setup batch projections
#-----------------------
#---Here will can setup ecological scenarios, such as low or high initial relative SSB (e.g. scenarios, states of nature)
#---We can also setup multiple management options to run against each of those scenarios
#---After running these simulations, some report-ready plotting functions can be used to aggregate all of the simulations into plots.
#---Setup higher relative SSB scenario
StochasticObj<-new("Stochastic")
StochasticObj@historicalBio = c(0.3, 0.6)
StochasticObj@historicalCPUE = c(1,2) #This is used in bag limit projection
StochasticObj@historicalCPUEType = "vulN"
ProFisheryObj<-new("Fishery")
ProFisheryObj@title<-"Example"
ProFisheryObj@vulType<-"logistic"
ProFisheryObj@vulParams<-c(40.1,40.2) #Approx. knife edge based on input value of 40.1. Must put slightly higher value for second parameter
ProFisheryObj@retType<-"full" #We will change this as needed below in 'for' loop
ProFisheryObj@retMax <- 1
ProFisheryObj@Dmort <- 0
StrategyObj <- new("Strategy")
StrategyObj@projectionYears <- 50
StrategyObj@projectionName<-"projectionStrategy"
StrategyObj@projectionParams<-list(bag = c(-99, -99), effort = matrix(1:1, nrow=50, ncol=2, byrow = FALSE))
#Batch processing - 3 management strategies
stateLmin<-c(-99, 35.6,  35.6)
stateBag<-c(2, -99, 2)
fileLabel<-c("Higher_option1", "Higher_option2", "Higher_option3")
projectionLabel<-c("Bag 2", "Min size 14 inch", "Bag 2 & min size 14 inch")
for(sc in 1:NROW(stateLmin)){
#Size limit - changes retention, not selectivity
if(stateLmin[sc] == -99){
ProFisheryObj@retType<-"full"
} else {
ProFisheryObj@retType<-"logistic"
ProFisheryObj@retParams<-c(stateLmin[sc],stateLmin[sc]+0.1)
}
#Bag limit
StrategyObj@projectionParams<-list(bag = c(stateBag[sc], stateBag[sc]), effort = matrix(1:1, nrow=50, ncol=2, byrow = FALSE))
runProjection(LifeHistoryObj = LifeHistoryObj,
TimeAreaObj = TimeAreaObj,
HistFisheryObj = HistFisheryObj,
ProFisheryObj = ProFisheryObj,
StrategyObj = StrategyObj,
StochasticObj = StochasticObj,
wd = here(),
fileName = fileLabel[sc],
doPlot = TRUE,
titleStrategy = projectionLabel[sc]
)
}
#---Setup lower relative SSB scenario
StochasticObj<-new("Stochastic")
StochasticObj@historicalBio = c(0.1, 0.3)
StochasticObj@historicalCPUE = c(1,2) #This is used in bag limit projection
StochasticObj@historicalCPUEType = "vulN"
ProFisheryObj<-new("Fishery")
ProFisheryObj@title<-"Example"
ProFisheryObj@vulType<-"logistic"
ProFisheryObj@vulParams<-c(40.1,40.2) #Approx. knife edge based on input value of 40.1. Must put slightly higher value for second parameter
ProFisheryObj@retType<-"full" #We will change this as needed below in 'for' loop
ProFisheryObj@retMax <- 1
ProFisheryObj@Dmort <- 0
StrategyObj <- new("Strategy")
StrategyObj@projectionYears <- 50
StrategyObj@projectionName<-"projectionStrategy"
StrategyObj@projectionParams<-list(bag = c(-99, -99), effort = matrix(1:1, nrow=50, ncol=2, byrow = FALSE))
#Batch processing - 3 management strategies
stateLmin<-c(-99, 35.6,  35.6)
stateBag<-c(2, -99,  2)
fileLabel<-c("Lower_option1", "Lower_option2", "Lower_option3")
projectionLabel<-c("Bag 2", "Min size 14 inch", "Bag 2 & min size 14 inch")
for(sc in 1:NROW(stateLmin)){
#Size limit - changes retention, not selectivity
if(stateLmin[sc] == -99){
ProFisheryObj@retType<-"full"
} else {
ProFisheryObj@retType<-"logistic"
ProFisheryObj@retParams<-c(stateLmin[sc],stateLmin[sc]+0.1)
}
#Bag limit
StrategyObj@projectionParams<-list(bag = c(stateBag[sc], stateBag[sc]), effort = matrix(1:1, nrow=50, ncol=2, byrow = FALSE))
runProjection(LifeHistoryObj = LifeHistoryObj,
TimeAreaObj = TimeAreaObj,
HistFisheryObj = HistFisheryObj,
ProFisheryObj = ProFisheryObj,
StrategyObj = StrategyObj,
StochasticObj = StochasticObj,
wd = here(),
fileName = fileLabel[sc],
doPlot = TRUE,
titleStrategy = projectionLabel[sc]
)
}
X<-readProjection( wd = here(),
fileName = fileLabel[1])
dim(X$dynamics$VB)
dim(X$dynamics$SB)
devtools::check()
#---Populate LifeHistory object
#---Contains the life history parameters
LifeHistoryObj <- new("LifeHistory")
LifeHistoryObj@title<-"A lineatus"
LifeHistoryObj@speciesName<-"A lineatus"
LifeHistoryObj@Linf<-191
LifeHistoryObj@K<-0.26
LifeHistoryObj@t0<- -0.37
LifeHistoryObj@L50<-181
LifeHistoryObj@L95<-195
LifeHistoryObj@M<-0.26
LifeHistoryObj@L_type<-"FL"
LifeHistoryObj@L_units<-"mm"
LifeHistoryObj@LW_A<-0.01
LifeHistoryObj@LW_B<-3
LifeHistoryObj@Steep<-0.55
LifeHistoryObj@isHermaph<-FALSE
LifeHistoryObj@recSD<-0 #Run with no rec var'n to see deterministic trends
library(fishSimGTG)
#---Populate LifeHistory object
#---Contains the life history parameters
LifeHistoryObj <- new("LifeHistory")
LifeHistoryObj@title<-"A lineatus"
LifeHistoryObj@speciesName<-"A lineatus"
LifeHistoryObj@Linf<-191
LifeHistoryObj@K<-0.26
LifeHistoryObj@t0<- -0.37
LifeHistoryObj@L50<-181
LifeHistoryObj@L95<-195
LifeHistoryObj@M<-0.26
LifeHistoryObj@L_type<-"FL"
LifeHistoryObj@L_units<-"mm"
LifeHistoryObj@LW_A<-0.01
LifeHistoryObj@LW_B<-3
LifeHistoryObj@Steep<-0.55
LifeHistoryObj@isHermaph<-FALSE
LifeHistoryObj@recSD<-0 #Run with no rec var'n to see deterministic trends
#---Populate a TimeArea object
#---Contains basic inputs about time and space needed to establish simulation bounds
#---The effort matrix is set as multipliers of initial equilibrium fishing mortality
TimeAreaObj<-new("TimeArea")
TimeAreaObj@title = "Example"
TimeAreaObj@gtg = 13
TimeAreaObj@areas = 2
TimeAreaObj@recArea = c(0.99, 0.01)
TimeAreaObj@iterations = 3
TimeAreaObj@historicalYears = 50
TimeAreaObj@historicalBio = 0.1
TimeAreaObj@historicalBioType = "SPR"
TimeAreaObj@move <- matrix(c(1,0, 0,1), nrow=2, ncol=2, byrow=FALSE)
TimeAreaObj@historicalEffort<-matrix(1:1, nrow = 50, ncol = 2, byrow = FALSE)
#---Visualize life history. Does everything make sense?
#---Optional, create a plot of life history that is useful for reports.
#To simply display to the console
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj, doPlot = TRUE)
#To save to file (for reports?)
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj, wd = here(), imageName = "LifeHistory", dpi = 300, doPlot = TRUE)
lhOut
HistFisheryObj<-new("Fishery")
HistFisheryObj@title<-"Example"
HistFisheryObj@vulType<-"logistic"
HistFisheryObj@vulParams<-c(175,183) #Approx. knife edge based on input value of 40.1. Must put slightly higher value for second parameter
HistFisheryObj@retType<-"full"
HistFisheryObj@retMax <- 1
HistFisheryObj@Dmort <- 0
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj)
selWrapper(lh = lhOut, TimeAreaObj, FisheryObj = HistFisheryObj, doPlot = TRUE)
runProjection(LifeHistoryObj = LifeHistoryObj,
TimeAreaObj = TimeAreaObj,
HistFisheryObj = HistFisheryObj,
wd = here(),
fileName = "Test1",
doPlot = TRUE,
titleStrategy = "Test1"
)
library(here)
runProjection(LifeHistoryObj = LifeHistoryObj,
TimeAreaObj = TimeAreaObj,
HistFisheryObj = HistFisheryObj,
wd = here(),
fileName = "Test1",
doPlot = TRUE,
titleStrategy = "Test1"
)
X<-readProjection<-function(wd = here(), fileName = "Test1"){
readRDS(file=paste(wd, "/", fileName, ".rds", sep=""))
}
X
X<-readProjection(wd = here(), fileName = "Test1"){
readRDS(file=paste(wd, "/", fileName, ".rds", sep=""))
}
readProjection<-function(wd, fileName){
readRDS(file=paste(wd, "/", fileName, ".rds", sep=""))
}
X<-readProjection(wd = here(), fileName = "Test1"){
readRDS(file=paste(wd, "/", fileName, ".rds", sep=""))
}
X<-readProjection(wd = here(), fileName = "Test1")
X$dynamics$SPR
lhOut<-LHwrapper(LifeHistoryObj, TimeAreaObj)
sel<-selWrapper(lh = lhOut, TimeAreaObj, FisheryObj = HistFisheryObj, doPlot = TRUE)
lh<-LHwrapper(LifeHistoryObj, TimeAreaObj)
sel<-selWrapper(lh = lhOut, TimeAreaObj, FisheryObj = HistFisheryObj, doPlot = TRUE)
Y<-solveD(lh, sel, doFit = TRUE, D_type = "SPR" , D_in =0.1)
Y
102/1.13
4.899*26^-0.916
log(0.01)/0.246
-log(0.01)/0.246
-log(0.01)/0.248
-log(0.006)/0.248
-log(0.0006)/0.248
-log(0.006)/0.248
-log(0.001)/0.248
-log(0.003)/0.248
-log(0.01)/0.248
0.493*460.85
460*(1-exp(-0.1129*(18+2.765)))
15/18
-log(0.01)/0.211
97*(1-exp(-0.11*(21+0.316)))
48/87
57.1*(1-exp(-0.093*(0+2.78)))
48-39.4
scale<--0.312
location<-38.4
L<-seq(0,80,1)
P<-plogis(L, location=location, scale=scale)
P
L
?plogis
scale<-0.312
location<-38.4
L<-seq(0,80,1)
P<-plogis(L, location=location, scale=scale)
P
plot(L, P)
scale<-1/0.312
location<-38.4
L<-seq(0,80,1)
P<-plogis(L, location=location, scale=scale)
plot(L,P, type="p")
which(abs(P-0.95)==min(abs(P-0.95)))
P[49]
P[50]
P[48]
qlogis(p=0.95, location=location, scale=scale)
L[49]
47.83-38.4
