lh@M<-0.1
lh@K<-0.2
lh@Tmax<-1
lh@isHermaph<-FALSE
sim<-lbsprSimWrapper(LifeHistoryObj = lh)
sim2<-lbsprSimWrapperAbsel(LifeHistoryObj = lh)
sim3<-gtgSimWrapper(LifeHistoryObj = lh)
#YPR
plot(sim@sim$F_M, sim@sim$YPR_EU[,72]/max(sim@sim$YPR_EU), type="l", col="red")
lines(sim2@sim$F_M, sim2@sim$YPR_EU[,72]/max(sim2@sim$YPR_EU), col="blue")
lines(sim3@sim$F_M, sim3@sim$YPR_EU[,72]/max(sim3@sim$YPR_EU), col="green")
#YPR
plot(sim@sim$F_M, sim@sim$YPR_EU[,50]/max(sim@sim$YPR_EU), type="l", col="red")
lines(sim2@sim$F_M, sim2@sim$YPR_EU[,50]/max(sim2@sim$YPR_EU), col="blue")
lines(sim3@sim$F_M, sim3@sim$YPR_EU[,50]/max(sim3@sim$YPR_EU), col="green")
#YPR
plot(sim@sim$F_M, sim@sim$YPR_EU[,20]/max(sim@sim$YPR_EU), type="l", col="red")
lines(sim2@sim$F_M, sim2@sim$YPR_EU[,20]/max(sim2@sim$YPR_EU), col="blue")
lines(sim3@sim$F_M, sim3@sim$YPR_EU[,20]/max(sim3@sim$YPR_EU), col="green")
#YPR
plot(sim@sim$F_M, sim@sim$YPR_EU[,2]/max(sim@sim$YPR_EU), type="l", col="red")
lines(sim2@sim$F_M, sim2@sim$YPR_EU[,2]/max(sim2@sim$YPR_EU), col="blue")
lines(sim3@sim$F_M, sim3@sim$YPR_EU[,2]/max(sim3@sim$YPR_EU), col="green")
#Yield
plot(sim@sim$F_M, sim@sim$Yield_EU[,72], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$Yield_EU[,72], col="blue")
lines(sim3@sim$F_M, sim3@sim$Yield_EU[,72]/max(sim3@sim$Yield_EU), col="green")
#Yield
plot(sim@sim$F_M, sim@sim$Yield_EU[,50], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$Yield_EU[,50], col="blue")
lines(sim3@sim$F_M, sim3@sim$Yield_EU[,50]/max(sim3@sim$Yield_EU), col="green")
#Yield
plot(sim@sim$F_M, sim@sim$Yield_EU[,2], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$Yield_EU[,2], col="blue")
lines(sim3@sim$F_M, sim3@sim$Yield_EU[,2]/max(sim3@sim$Yield_EU), col="green")
#Yield
plot(sim@sim$F_M, sim@sim$Yield_EU[,20], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$Yield_EU[,20], col="blue")
lines(sim3@sim$F_M, sim3@sim$Yield_EU[,20]/max(sim3@sim$Yield_EU), col="green")
#SPR
plot(sim@sim$F_M, sim@sim$SPR_EU[,72], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$SPR_EU[,72], col="blue")
lines(sim3@sim$F_M, sim3@sim$SPR_EU[,72], col="green")
#SPR
plot(sim@sim$F_M, sim@sim$SPR_EU[,50], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$SPR_EU[,50], col="blue")
lines(sim3@sim$F_M, sim3@sim$SPR_EU[,50], col="green")
#SPR
plot(sim@sim$F_M, sim@sim$SPR_EU[,20], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$SPR_EU[,20], col="blue")
lines(sim3@sim$F_M, sim3@sim$SPR_EU[,20], col="green")
#SPR
plot(sim@sim$F_M, sim@sim$SPR_EU[,2], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$SPR_EU[,2], col="blue")
lines(sim3@sim$F_M, sim3@sim$SPR_EU[,2], col="green")
rep(1:2, 2:3)
tmp1<-data.frame()
tmp1$x<-c(1,2,2)
tmp1<-data.frame(x=c(1,2,3))
LifeHistoryObj
lh
LifeHistoryObj<-lh
FisheryObj
devtools::load_all()
#----------------------------------------
#Demonstrate plotting function of solveD
#----------------------------------------
lh<-LifeHistoryExample
lh@MK<-0.5
lh@M<-0.1
lh@K<-0.2
lh@Tmax<-1 #Keeping this set at 1 will override Tmax and use -log(0.01)/M for max age
FisheryObj<-new("Fishery")
FisheryObj@title<-"Test"
FisheryObj@historicalVulType<-"logistic"
FisheryObj@historicalVulParams<-c(50,75)
FisheryObj@historicalRetType<-"slotLimit"
FisheryObj@historicalRetParams<-c(60,70)
FisheryObj@historicalRetMax<-1
FisheryObj@historicalDmort<-0.1
FisheryObj@projectionVulType<-"logistic"
FisheryObj@projectionVulParams<-c(50,75)
FisheryObj@projectionRetType<-"full"
FisheryObj@projectionRetMax<-0.5
FisheryObj@projectionDmort<-0
solveD(LifeHistoryObj=lh, FisheryObj=FisheryObj, doFit = FALSE, F_in = 0.2, doPlot = TRUE)
devtools::load_all()
#----------------------------------------
#Demonstrate plotting function of solveD
#----------------------------------------
lh<-LifeHistoryExample
lh@MK<-0.5
lh@M<-0.1
lh@K<-0.2
lh@Tmax<-1 #Keeping this set at 1 will override Tmax and use -log(0.01)/M for max age
FisheryObj<-new("Fishery")
FisheryObj@title<-"Test"
FisheryObj@historicalVulType<-"logistic"
FisheryObj@historicalVulParams<-c(50,75)
FisheryObj@historicalRetType<-"slotLimit"
FisheryObj@historicalRetParams<-c(60,70)
FisheryObj@historicalRetMax<-1
FisheryObj@historicalDmort<-0.1
FisheryObj@projectionVulType<-"logistic"
FisheryObj@projectionVulParams<-c(50,75)
FisheryObj@projectionRetType<-"full"
FisheryObj@projectionRetMax<-0.5
FisheryObj@projectionDmort<-0
solveD(LifeHistoryObj=lh, FisheryObj=FisheryObj, doFit = FALSE, F_in = 0.2, doPlot = TRUE)
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
#----------------------------------------
#Demonstrate plotting function of solveD
#----------------------------------------
lh<-LifeHistoryExample
lh@MK<-0.5
lh@M<-0.1
lh@K<-0.2
lh@Tmax<-1 #Keeping this set at 1 will override Tmax and use -log(0.01)/M for max age
FisheryObj<-new("Fishery")
FisheryObj@title<-"Test"
FisheryObj@historicalVulType<-"logistic"
FisheryObj@historicalVulParams<-c(50,75)
FisheryObj@historicalRetType<-"slotLimit"
FisheryObj@historicalRetParams<-c(60,70)
FisheryObj@historicalRetMax<-1
FisheryObj@historicalDmort<-0.1
FisheryObj@projectionVulType<-"logistic"
FisheryObj@projectionVulParams<-c(50,75)
FisheryObj@projectionRetType<-"full"
FisheryObj@projectionRetMax<-0.5
FisheryObj@projectionDmort<-0
solveD(LifeHistoryObj=lh, FisheryObj=FisheryObj, doFit = FALSE, F_in = 0.2, doPlot = TRUE)
solveD(LifeHistoryObj=lh, FisheryObj=FisheryObj, doFit = FALSE, F_in = 0, doPlot = TRUE)
devtools::load_all()
#----------------------------------------
#Demonstrate plotting function of solveD
#----------------------------------------
lh<-LifeHistoryExample
lh@MK<-0.5
lh@M<-0.1
lh@K<-0.2
lh@Tmax<-1 #Keeping this set at 1 will override Tmax and use -log(0.01)/M for max age
FisheryObj<-new("Fishery")
FisheryObj@title<-"Test"
FisheryObj@historicalVulType<-"logistic"
FisheryObj@historicalVulParams<-c(50,75)
FisheryObj@historicalRetType<-"slotLimit"
FisheryObj@historicalRetParams<-c(60,70)
FisheryObj@historicalRetMax<-1
FisheryObj@historicalDmort<-0.1
FisheryObj@projectionVulType<-"logistic"
FisheryObj@projectionVulParams<-c(50,75)
FisheryObj@projectionRetType<-"full"
FisheryObj@projectionRetMax<-0.5
FisheryObj@projectionDmort<-0
solveD(LifeHistoryObj=lh, FisheryObj=FisheryObj, doFit = FALSE, F_in = 0, doPlot = TRUE)
devtools::load_all()
#----------------------------------------
#Demonstrate plotting function of solveD
#----------------------------------------
lh<-LifeHistoryExample
lh@MK<-0.5
lh@M<-0.1
lh@K<-0.2
lh@Tmax<-1 #Keeping this set at 1 will override Tmax and use -log(0.01)/M for max age
FisheryObj<-new("Fishery")
FisheryObj@title<-"Test"
FisheryObj@historicalVulType<-"logistic"
FisheryObj@historicalVulParams<-c(50,75)
FisheryObj@historicalRetType<-"slotLimit"
FisheryObj@historicalRetParams<-c(60,70)
FisheryObj@historicalRetMax<-1
FisheryObj@historicalDmort<-0.1
FisheryObj@projectionVulType<-"logistic"
FisheryObj@projectionVulParams<-c(50,75)
FisheryObj@projectionRetType<-"full"
FisheryObj@projectionRetMax<-0.5
FisheryObj@projectionDmort<-0
solveD(LifeHistoryObj=lh, FisheryObj=FisheryObj, doFit = FALSE, F_in = 0, doPlot = TRUE)
#----------------------------------
#Demonstrate selecvitity plotting
#-----------------------------------
FisheryObj<-new("Fishery")
FisheryObj@title<-"Test"
FisheryObj@historicalVulType<-"logistic"
FisheryObj@historicalVulParams<-c(50,75)
FisheryObj@historicalRetType<-"slotLimit"
FisheryObj@historicalRetParams<-c(60,70)
FisheryObj@historicalRetMax<-1
FisheryObj@historicalDmort<-0.1
FisheryObj@projectionVulType<-"logistic"
FisheryObj@projectionVulParams<-c(50,75)
FisheryObj@projectionRetType<-"full"
FisheryObj@projectionRetMax<-0.5
FisheryObj@projectionDmort<-0
X<-Sel(LifeHistoryObj, FisheryObj, doProjection = TRUE, doPlot = TRUE)
X<-selWrapper(LifeHistoryObj, FisheryObj, doProjection = TRUE, doPlot = TRUE)
X<-selWrapper(LifeHistoryObj=lh, FisheryObj = FisheryObj, doProjection = TRUE, doPlot = TRUE)
#----------------------------------------
#Demonstrate plotting function of solveD
#----------------------------------------
lh<-LifeHistoryExample
lh@MK<-0.5
lh@M<-0.1
lh@K<-0.2
lh@Tmax<-1 #Keeping this set at 1 will override Tmax and use -log(0.01)/M for max age
FisheryObj<-new("Fishery")
FisheryObj@title<-"Test"
FisheryObj@historicalVulType<-"logistic"
FisheryObj@historicalVulParams<-c(50,75)
FisheryObj@historicalRetType<-"full"
FisheryObj@historicalRetParams<-c(60,70)
FisheryObj@historicalRetMax<-1
FisheryObj@historicalDmort<-0
solveD(LifeHistoryObj=lh, FisheryObj=FisheryObj, doFit = FALSE, F_in = 0, doPlot = TRUE)
FisheryObj<-new("Fishery")
FisheryObj@title<-"Test"
FisheryObj@historicalVulType<-"logistic"
FisheryObj@historicalVulParams<-c(50,75)
FisheryObj@historicalRetType<-"slotLimit"
FisheryObj@historicalRetParams<-c(60,70)
FisheryObj@historicalRetMax<-1
FisheryObj@historicalDmort<-0.1
FisheryObj@projectionVulType<-"logistic"
FisheryObj@projectionVulParams<-c(50,75)
FisheryObj@projectionRetType<-"full"
FisheryObj@projectionRetMax<-0.5
FisheryObj@projectionDmort<-0
X<-selWrapper(LifeHistoryObj=lh, FisheryObj = FisheryObj, doProjection = TRUE, doPlot = TRUE)
lh<-LifeHistoryExample
lh@MK<-2
lh@M<-0.2
lh@K<-0.1
lh@Tmax<-1 #Keeping this set at 1 will override Tmax and use -log(0.01)/M for max age
FisheryObj<-new("Fishery")
FisheryObj@title<-"Test"
FisheryObj@historicalVulType<-"logistic"
FisheryObj@historicalVulParams<-c(50,75)
FisheryObj@historicalRetType<-"slotLimit"
FisheryObj@historicalRetParams<-c(60,70)
FisheryObj@historicalRetMax<-1
FisheryObj@historicalDmort<-0.1
FisheryObj@projectionVulType<-"logistic"
FisheryObj@projectionVulParams<-c(50,75)
FisheryObj@projectionRetType<-"full"
FisheryObj@projectionRetMax<-0.5
FisheryObj@projectionDmort<-0
X<-selWrapper(LifeHistoryObj=lh, FisheryObj = FisheryObj, doProjection = TRUE, doPlot = TRUE)
#----------------------------------------
#Demonstrate plotting function of solveD
#----------------------------------------
lh<-LifeHistoryExample
lh@MK<-2
lh@M<-0.2
lh@K<-0.1
lh@Tmax<-1 #Keeping this set at 1 will override Tmax and use -log(0.01)/M for max age
FisheryObj<-new("Fishery")
FisheryObj@title<-"Test"
FisheryObj@historicalVulType<-"logistic"
FisheryObj@historicalVulParams<-c(50,75)
FisheryObj@historicalRetType<-"full"
FisheryObj@historicalRetParams<-c(60,70)
FisheryObj@historicalRetMax<-1
FisheryObj@historicalDmort<-0
solveD(LifeHistoryObj=lh, FisheryObj=FisheryObj, doFit = FALSE, F_in = 0, doPlot = TRUE)
#---------------------
#Comparing YPR curves
#---------------------
#LH
lh<-LifeHistoryExample
lh@MK<-0.5
lh@M<-0.1
lh@K<-0.2
lh@Tmax<-1 #Keeping this set at 1 will override Tmax and use -log(0.01)/M for max age
lh@isHermaph<-FALSE
#---------------------
#Comparing YPR curves
#---------------------
#LH
lh<-LifeHistoryExample
lh@MK<-0.5
lh@M<-0.1
lh@K<-0.2
lh@Tmax<-1 #Keeping this set at 1 will override Tmax and use -log(0.01)/M for max age
lh@isHermaph<-FALSE
ptm<-proc.time()
sim<-lbsprSimWrapper(LifeHistoryObj = lh)
print((proc.time()-ptm)/60)
ptm<-proc.time()
sim3<-gtgSimWrapper(LifeHistoryObj = lh)
print((proc.time()-ptm)/60)
print((proc.time()-ptm)/60)
#YPR
plot(sim@sim$F_M, sim@sim$YPR_EU[,2]/max(sim@sim$YPR_EU), type="l", col="red")
lines(sim2@sim$F_M, sim2@sim$YPR_EU[,2]/max(sim2@sim$YPR_EU), col="blue")
lines(sim3@sim$F_M, sim3@sim$YPR_EU[,2]/max(sim3@sim$YPR_EU), col="green")
#YPR
plot(sim@sim$F_M, sim@sim$YPR_EU[,20]/max(sim@sim$YPR_EU), type="l", col="red")
lines(sim2@sim$F_M, sim2@sim$YPR_EU[,20]/max(sim2@sim$YPR_EU), col="blue")
lines(sim3@sim$F_M, sim3@sim$YPR_EU[,20]/max(sim3@sim$YPR_EU), col="green")
#YPR
plot(sim@sim$F_M, sim@sim$YPR_EU[,50]/max(sim@sim$YPR_EU), type="l", col="red")
lines(sim2@sim$F_M, sim2@sim$YPR_EU[,50]/max(sim2@sim$YPR_EU), col="blue")
lines(sim3@sim$F_M, sim3@sim$YPR_EU[,50]/max(sim3@sim$YPR_EU), col="green")
#YPR
plot(sim@sim$F_M, sim@sim$YPR_EU[,70]/max(sim@sim$YPR_EU), type="l", col="red")
lines(sim2@sim$F_M, sim2@sim$YPR_EU[,70]/max(sim2@sim$YPR_EU), col="blue")
lines(sim3@sim$F_M, sim3@sim$YPR_EU[,70]/max(sim3@sim$YPR_EU), col="green")
#Yield
plot(sim@sim$F_M, sim@sim$Yield_EU[,20], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$Yield_EU[,20], col="blue")
lines(sim3@sim$F_M, sim3@sim$Yield_EU[,20]/max(sim3@sim$Yield_EU), col="green")
#Yield
plot(sim@sim$F_M, sim@sim$Yield_EU[,50], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$Yield_EU[,50], col="blue")
lines(sim3@sim$F_M, sim3@sim$Yield_EU[,50]/max(sim3@sim$Yield_EU), col="green")
devtools::load_all()
#---------------------
#Comparing YPR curves
#---------------------
#LH
lh<-LifeHistoryExample
lh@MK<-0.5
lh@M<-0.1
lh@K<-0.2
lh@Tmax<-1 #Keeping this set at 1 will override Tmax and use -log(0.01)/M for max age
lh@isHermaph<-FALSE
ptm<-proc.time()
sim<-lbsprSimWrapper(LifeHistoryObj = lh)
print("Time in minutes: ")
print((proc.time()-ptm)/60)
ptm<-proc.time()
sim3<-gtgSimWrapper(LifeHistoryObj = lh)
print("Time in minutes: ")
print((proc.time()-ptm)/60)
#YPR
plot(sim@sim$F_M, sim@sim$YPR_EU[,70]/max(sim@sim$YPR_EU), type="l", col="red")
lines(sim2@sim$F_M, sim2@sim$YPR_EU[,70]/max(sim2@sim$YPR_EU), col="blue")
lines(sim3@sim$F_M, sim3@sim$YPR_EU[,70]/max(sim3@sim$YPR_EU), col="green")
#YPR
plot(sim@sim$F_M, sim@sim$YPR_EU[,50]/max(sim@sim$YPR_EU), type="l", col="red")
lines(sim2@sim$F_M, sim2@sim$YPR_EU[,50]/max(sim2@sim$YPR_EU), col="blue")
lines(sim3@sim$F_M, sim3@sim$YPR_EU[,50]/max(sim3@sim$YPR_EU), col="green")
#YPR
plot(sim@sim$F_M, sim@sim$YPR_EU[,20]/max(sim@sim$YPR_EU), type="l", col="red")
lines(sim2@sim$F_M, sim2@sim$YPR_EU[,20]/max(sim2@sim$YPR_EU), col="blue")
lines(sim3@sim$F_M, sim3@sim$YPR_EU[,20]/max(sim3@sim$YPR_EU), col="green")
#Yield
plot(sim@sim$F_M, sim@sim$Yield_EU[,50], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$Yield_EU[,50], col="blue")
lines(sim3@sim$F_M, sim3@sim$Yield_EU[,50]/max(sim3@sim$Yield_EU), col="green")
#Yield
plot(sim@sim$F_M, sim@sim$Yield_EU[,20], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$Yield_EU[,20], col="blue")
lines(sim3@sim$F_M, sim3@sim$Yield_EU[,20]/max(sim3@sim$Yield_EU), col="green")
#SPR
plot(sim@sim$F_M, sim@sim$SPR_EU[,2], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$SPR_EU[,2], col="blue")
lines(sim3@sim$F_M, sim3@sim$SPR_EU[,2], col="green")
#SPR
plot(sim@sim$F_M, sim@sim$SPR_EU[,29], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$SPR_EU[,29], col="blue")
lines(sim3@sim$F_M, sim3@sim$SPR_EU[,29], col="green")
#SPR
plot(sim@sim$F_M, sim@sim$SPR_EU[,69], type="l", col="red", main = "0.01")
lines(sim2@sim$F_M, sim2@sim$SPR_EU[,69], col="blue")
lines(sim3@sim$F_M, sim3@sim$SPR_EU[,69], col="green")
library(shiny)
library(waiter)
library(fishSimGTG)
ui <- fluidPage(
useWaiter(),
useHostess(), # include dependencies
actionButton("btn", "render"),
)
server <- function(input, output){
host <- Hostess$new()
w <- Waiter$new(
html = host$get_loader(
preset = "bubble",
text_color = "black",
center_page = TRUE,
class = "",
min = 0,
max = 100,
svg = NULL,
progress_type = "fill",
fill_direction = c("btt", "ttb", "ltr", "rtl"),
stroke_direction = c("normal", "reverse"),
fill_color = NULL,
stroke_color = "pink"
),
color = transparent(alpha = 0.2),
fadeout = TRUE
)
w$show()
gtgSimWrapper(LifeHistoryObj = LifeHistoryExample, waitName=w, hostName=host)
w$hide()
}
shinyApp(ui, server)
shinyApp(ui, server)
devtools::check()
devtools::check()
?mutate
?slot
?slotNames
?%>%
??%>%
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?dnorm
?plogis
?par
?median
devtools::check()
devtools::check()
devtools::check()
?mutate
?mutate
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document() (
devtools::document(
devtools::document()
devtools::check()
devtools::check()
?optimize
devtools::check()
devtools::check()
devtools::check()
devtools::check()
x<-data.frame(z=c(1,2,3))
x
x$z
x<-data.frame()
x<-rbind(x, list(z=c(1,2,3)))
x
devtools::check()
q$p<-c(1,2,3)
devtools::check()
x<-data.frame(y=NULL)
x
x$y
x<-rbind(x, list(y=c(1,2,3)))
x
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?gather
?any_of
?across
?rename_with
?cases_when
?case_when
devtools::check()
devtools::check()
?any_of
devtools::check()
?%>%
??%>%
devtools::check()
devtools::check()
devtools::load_all()
library(tidyverse)
LH_to_dataframe(LifeHistoryExample)
devtools::load_all()
LH_to_dataframe(LifeHistoryExample)
devtools::load_all()
LH_to_dataframe(LifeHistoryExample)
devtools::load_all()
devtools::check()
devtools::load_all()
#---------------------
#Comparing YPR curves
#---------------------
#LH
lh<-LifeHistoryExample
lh@MK<-0.5
lh@M<-0.1
lh@K<-0.2
lh@Tmax<-1 #Keeping this set at 1 will override Tmax and use -log(0.01)/M for max age
lh@isHermaph<-FALSE
ptm<-proc.time()
sim3<-gtgSimWrapper(LifeHistoryObj = lh)
print("Time in minutes: ")
print((proc.time()-ptm)/60)
sim3
lh<-LifeHistoryExample
lh@MK<-0.5
lh@M<-0.1
lh@K<-0.2
lh@Tmax<-1 #Keeping this set at 1 will override Tmax and use -log(0.01)/M for max age
devtools::load_all()
lh<-LifeHistoryExample
lh@MK<-0.5
lh@M<-0.1
lh@K<-0.2
lh@Tmax<-1 #Keeping this set at 1 will override Tmax and use -log(0.01)/M for max age
ptm<-proc.time()
sim3<-gtgSimWrapper(LifeHistoryObj = lh)
print("Time in minutes: ")
print((proc.time()-ptm)/60)
